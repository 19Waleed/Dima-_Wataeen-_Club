//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dima__Wataeen__Club
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Club_DatabaseEntities2 : DbContext
    {
        public Club_DatabaseEntities2()
            : base("name=Club_DatabaseEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Menus> Menus { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<Table_Booking_Details> Table_Booking_Details { get; set; }
        public DbSet<Table_Contests> Table_Contests { get; set; }
        public DbSet<Table_Expenses> Table_Expenses { get; set; }
        public DbSet<Table_Job_status> Table_Job_status { get; set; }
        public DbSet<Table_Master_Member> Table_Master_Member { get; set; }
        public DbSet<Table_Member_Details> Table_Member_Details { get; set; }
        public DbSet<Table_Subscriptions> Table_Subscriptions { get; set; }
        public DbSet<Table_Teams> Table_Teams { get; set; }
        public DbSet<Table_User_Pages> Table_User_Pages { get; set; }
        public DbSet<Table_User_Profile> Table_User_Profile { get; set; }
        public DbSet<Table_User_Teams> Table_User_Teams { get; set; }
        public DbSet<Table_History_Contests> Table_History_Contests { get; set; }
        public DbSet<VewPageInfo> VewPageInfo { get; set; }
        public DbSet<VewUserRole> VewUserRole { get; set; }
        public DbSet<View_AccecsUser_Pages> View_AccecsUser_Pages { get; set; }
        public DbSet<View_BookDetails> View_BookDetails { get; set; }
        public DbSet<View_BookingReport> View_BookingReport { get; set; }
        public DbSet<View_Master_MembeApproved> View_Master_MembeApproved { get; set; }
        public DbSet<View_Master_MembeByApp> View_Master_MembeByApp { get; set; }
        public DbSet<View_MemberReport> View_MemberReport { get; set; }
        public DbSet<View_Page_Info> View_Page_Info { get; set; }
        public DbSet<View_Payment_Member> View_Payment_Member { get; set; }
        public DbSet<View_PaymentTeame> View_PaymentTeame { get; set; }
        public DbSet<View_SELECMember> View_SELECMember { get; set; }
        public DbSet<View_SELECMemberSELERetern> View_SELECMemberSELERetern { get; set; }
        public DbSet<View_TeamsApprove> View_TeamsApprove { get; set; }
        public DbSet<View_User_Pages> View_User_Pages { get; set; }
        public DbSet<View_User_ProfileUser_Pass> View_User_ProfileUser_Pass { get; set; }
        public DbSet<View_UserProfile> View_UserProfile { get; set; }
    
        public virtual ObjectResult<SP__Booking_Date_Result> SP__Booking_Date(string action, Nullable<decimal> iD, string team_ID, string phonen, Nullable<System.DateTime> booking_Date, string whoInsert, Nullable<System.DateTime> insertDatee, string approveBy, Nullable<System.DateTime> approveDate, string whoUpdate, Nullable<System.DateTime> updateDate, string whoDelete, Nullable<System.DateTime> deleteDate, Nullable<bool> recordDelete, string notes)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var team_IDParameter = team_ID != null ?
                new ObjectParameter("Team_ID", team_ID) :
                new ObjectParameter("Team_ID", typeof(string));
    
            var phonenParameter = phonen != null ?
                new ObjectParameter("Phonen", phonen) :
                new ObjectParameter("Phonen", typeof(string));
    
            var booking_DateParameter = booking_Date.HasValue ?
                new ObjectParameter("Booking_Date", booking_Date) :
                new ObjectParameter("Booking_Date", typeof(System.DateTime));
    
            var whoInsertParameter = whoInsert != null ?
                new ObjectParameter("WhoInsert", whoInsert) :
                new ObjectParameter("WhoInsert", typeof(string));
    
            var insertDateeParameter = insertDatee.HasValue ?
                new ObjectParameter("InsertDatee", insertDatee) :
                new ObjectParameter("InsertDatee", typeof(System.DateTime));
    
            var approveByParameter = approveBy != null ?
                new ObjectParameter("ApproveBy", approveBy) :
                new ObjectParameter("ApproveBy", typeof(string));
    
            var approveDateParameter = approveDate.HasValue ?
                new ObjectParameter("ApproveDate", approveDate) :
                new ObjectParameter("ApproveDate", typeof(System.DateTime));
    
            var whoUpdateParameter = whoUpdate != null ?
                new ObjectParameter("WhoUpdate", whoUpdate) :
                new ObjectParameter("WhoUpdate", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var whoDeleteParameter = whoDelete != null ?
                new ObjectParameter("WhoDelete", whoDelete) :
                new ObjectParameter("WhoDelete", typeof(string));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var recordDeleteParameter = recordDelete.HasValue ?
                new ObjectParameter("RecordDelete", recordDelete) :
                new ObjectParameter("RecordDelete", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP__Booking_Date_Result>("SP__Booking_Date", actionParameter, iDParameter, team_IDParameter, phonenParameter, booking_DateParameter, whoInsertParameter, insertDateeParameter, approveByParameter, approveDateParameter, whoUpdateParameter, updateDateParameter, whoDeleteParameter, deleteDateParameter, recordDeleteParameter, notesParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_Master_Member_Result> SP_Master_Member(string action, Nullable<decimal> iD, string member_ID, string full_Name, string address, string marital_Status, Nullable<System.DateTime> date_Birth, string phone, string picUrl, string team_ID, string member_Type, Nullable<decimal> card_ID_ON, string note, Nullable<System.DateTime> joining_Date, Nullable<decimal> iD_subscription, string subscription, string jobName, string team_NAME, string whoInsert, Nullable<System.DateTime> insertDate, string approveBy, Nullable<System.DateTime> approveDate, string whoUpdate, Nullable<System.DateTime> updateDate, string whoDelete, Nullable<System.DateTime> deleteDate, Nullable<bool> recordDelete, Nullable<bool> returnY_N)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var member_IDParameter = member_ID != null ?
                new ObjectParameter("Member_ID", member_ID) :
                new ObjectParameter("Member_ID", typeof(string));
    
            var full_NameParameter = full_Name != null ?
                new ObjectParameter("Full_Name", full_Name) :
                new ObjectParameter("Full_Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var marital_StatusParameter = marital_Status != null ?
                new ObjectParameter("Marital_Status", marital_Status) :
                new ObjectParameter("Marital_Status", typeof(string));
    
            var date_BirthParameter = date_Birth.HasValue ?
                new ObjectParameter("Date_Birth", date_Birth) :
                new ObjectParameter("Date_Birth", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var picUrlParameter = picUrl != null ?
                new ObjectParameter("PicUrl", picUrl) :
                new ObjectParameter("PicUrl", typeof(string));
    
            var team_IDParameter = team_ID != null ?
                new ObjectParameter("Team_ID", team_ID) :
                new ObjectParameter("Team_ID", typeof(string));
    
            var member_TypeParameter = member_Type != null ?
                new ObjectParameter("Member_Type", member_Type) :
                new ObjectParameter("Member_Type", typeof(string));
    
            var card_ID_ONParameter = card_ID_ON.HasValue ?
                new ObjectParameter("Card_ID_ON", card_ID_ON) :
                new ObjectParameter("Card_ID_ON", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var joining_DateParameter = joining_Date.HasValue ?
                new ObjectParameter("Joining_Date", joining_Date) :
                new ObjectParameter("Joining_Date", typeof(System.DateTime));
    
            var iD_subscriptionParameter = iD_subscription.HasValue ?
                new ObjectParameter("ID_subscription", iD_subscription) :
                new ObjectParameter("ID_subscription", typeof(decimal));
    
            var subscriptionParameter = subscription != null ?
                new ObjectParameter("subscription", subscription) :
                new ObjectParameter("subscription", typeof(string));
    
            var jobNameParameter = jobName != null ?
                new ObjectParameter("JobName", jobName) :
                new ObjectParameter("JobName", typeof(string));
    
            var team_NAMEParameter = team_NAME != null ?
                new ObjectParameter("Team_NAME", team_NAME) :
                new ObjectParameter("Team_NAME", typeof(string));
    
            var whoInsertParameter = whoInsert != null ?
                new ObjectParameter("WhoInsert", whoInsert) :
                new ObjectParameter("WhoInsert", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var approveByParameter = approveBy != null ?
                new ObjectParameter("ApproveBy", approveBy) :
                new ObjectParameter("ApproveBy", typeof(string));
    
            var approveDateParameter = approveDate.HasValue ?
                new ObjectParameter("ApproveDate", approveDate) :
                new ObjectParameter("ApproveDate", typeof(System.DateTime));
    
            var whoUpdateParameter = whoUpdate != null ?
                new ObjectParameter("WhoUpdate", whoUpdate) :
                new ObjectParameter("WhoUpdate", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var whoDeleteParameter = whoDelete != null ?
                new ObjectParameter("WhoDelete", whoDelete) :
                new ObjectParameter("WhoDelete", typeof(string));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var recordDeleteParameter = recordDelete.HasValue ?
                new ObjectParameter("RecordDelete", recordDelete) :
                new ObjectParameter("RecordDelete", typeof(bool));
    
            var returnY_NParameter = returnY_N.HasValue ?
                new ObjectParameter("ReturnY_N", returnY_N) :
                new ObjectParameter("ReturnY_N", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Master_Member_Result>("SP_Master_Member", actionParameter, iDParameter, member_IDParameter, full_NameParameter, addressParameter, marital_StatusParameter, date_BirthParameter, phoneParameter, picUrlParameter, team_IDParameter, member_TypeParameter, card_ID_ONParameter, noteParameter, joining_DateParameter, iD_subscriptionParameter, subscriptionParameter, jobNameParameter, team_NAMEParameter, whoInsertParameter, insertDateParameter, approveByParameter, approveDateParameter, whoUpdateParameter, updateDateParameter, whoDeleteParameter, deleteDateParameter, recordDeleteParameter, returnY_NParameter);
        }
    
        public virtual ObjectResult<SP_New_Team_Result> SP_New_Team(string action, Nullable<decimal> iD, string team_ID, string team_NAME, Nullable<System.DateTime> joining_Date, string note, string whoInsert, Nullable<System.DateTime> insertDate)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var team_IDParameter = team_ID != null ?
                new ObjectParameter("Team_ID", team_ID) :
                new ObjectParameter("Team_ID", typeof(string));
    
            var team_NAMEParameter = team_NAME != null ?
                new ObjectParameter("Team_NAME", team_NAME) :
                new ObjectParameter("Team_NAME", typeof(string));
    
            var joining_DateParameter = joining_Date.HasValue ?
                new ObjectParameter("Joining_Date", joining_Date) :
                new ObjectParameter("Joining_Date", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var whoInsertParameter = whoInsert != null ?
                new ObjectParameter("WhoInsert", whoInsert) :
                new ObjectParameter("WhoInsert", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_New_Team_Result>("SP_New_Team", actionParameter, iDParameter, team_IDParameter, team_NAMEParameter, joining_DateParameter, noteParameter, whoInsertParameter, insertDateParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_sign_in_Result> sp_sign_in(string action, string user_Name, string user_Pass, Nullable<bool> inActive, Nullable<bool> lock_Account, string member_ID, string full_Name, string team_ID, string iD, Nullable<System.DateTime> from_Datee, string page_ID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var user_NameParameter = user_Name != null ?
                new ObjectParameter("User_Name", user_Name) :
                new ObjectParameter("User_Name", typeof(string));
    
            var user_PassParameter = user_Pass != null ?
                new ObjectParameter("User_Pass", user_Pass) :
                new ObjectParameter("User_Pass", typeof(string));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var lock_AccountParameter = lock_Account.HasValue ?
                new ObjectParameter("Lock_Account", lock_Account) :
                new ObjectParameter("Lock_Account", typeof(bool));
    
            var member_IDParameter = member_ID != null ?
                new ObjectParameter("Member_ID", member_ID) :
                new ObjectParameter("Member_ID", typeof(string));
    
            var full_NameParameter = full_Name != null ?
                new ObjectParameter("Full_Name", full_Name) :
                new ObjectParameter("Full_Name", typeof(string));
    
            var team_IDParameter = team_ID != null ?
                new ObjectParameter("Team_ID", team_ID) :
                new ObjectParameter("Team_ID", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var from_DateeParameter = from_Datee.HasValue ?
                new ObjectParameter("From_Datee", from_Datee) :
                new ObjectParameter("From_Datee", typeof(System.DateTime));
    
            var page_IDParameter = page_ID != null ?
                new ObjectParameter("Page_ID", page_ID) :
                new ObjectParameter("Page_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_sign_in_Result>("sp_sign_in", actionParameter, user_NameParameter, user_PassParameter, inActiveParameter, lock_AccountParameter, member_IDParameter, full_NameParameter, team_IDParameter, iDParameter, from_DateeParameter, page_IDParameter);
        }
    
        public virtual ObjectResult<SP_Subscriptions_Result> SP_Subscriptions(string action, Nullable<decimal> subscriptions_ID, string member_ID, string memberIdOrTeamId, Nullable<System.DateTime> payment_Date, Nullable<int> subscriptions_Eyare, Nullable<decimal> iD_subscription, string subscription, Nullable<bool> paymentY_N, string note, string whoInsert, Nullable<System.DateTime> insertDate, string approveBy, Nullable<System.DateTime> approveDate, string whoUpdate, Nullable<System.DateTime> updateDate, string whoDelete, Nullable<System.DateTime> deleteDate, Nullable<decimal> iD, string team_ID, string team_NAME, Nullable<System.DateTime> joining_Date, string paymentReceiptPath)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var subscriptions_IDParameter = subscriptions_ID.HasValue ?
                new ObjectParameter("Subscriptions_ID", subscriptions_ID) :
                new ObjectParameter("Subscriptions_ID", typeof(decimal));
    
            var member_IDParameter = member_ID != null ?
                new ObjectParameter("Member_ID", member_ID) :
                new ObjectParameter("Member_ID", typeof(string));
    
            var memberIdOrTeamIdParameter = memberIdOrTeamId != null ?
                new ObjectParameter("MemberIdOrTeamId", memberIdOrTeamId) :
                new ObjectParameter("MemberIdOrTeamId", typeof(string));
    
            var payment_DateParameter = payment_Date.HasValue ?
                new ObjectParameter("Payment_Date", payment_Date) :
                new ObjectParameter("Payment_Date", typeof(System.DateTime));
    
            var subscriptions_EyareParameter = subscriptions_Eyare.HasValue ?
                new ObjectParameter("Subscriptions_Eyare", subscriptions_Eyare) :
                new ObjectParameter("Subscriptions_Eyare", typeof(int));
    
            var iD_subscriptionParameter = iD_subscription.HasValue ?
                new ObjectParameter("ID_subscription", iD_subscription) :
                new ObjectParameter("ID_subscription", typeof(decimal));
    
            var subscriptionParameter = subscription != null ?
                new ObjectParameter("subscription", subscription) :
                new ObjectParameter("subscription", typeof(string));
    
            var paymentY_NParameter = paymentY_N.HasValue ?
                new ObjectParameter("PaymentY_N", paymentY_N) :
                new ObjectParameter("PaymentY_N", typeof(bool));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var whoInsertParameter = whoInsert != null ?
                new ObjectParameter("WhoInsert", whoInsert) :
                new ObjectParameter("WhoInsert", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTime));
    
            var approveByParameter = approveBy != null ?
                new ObjectParameter("ApproveBy", approveBy) :
                new ObjectParameter("ApproveBy", typeof(string));
    
            var approveDateParameter = approveDate.HasValue ?
                new ObjectParameter("ApproveDate", approveDate) :
                new ObjectParameter("ApproveDate", typeof(System.DateTime));
    
            var whoUpdateParameter = whoUpdate != null ?
                new ObjectParameter("WhoUpdate", whoUpdate) :
                new ObjectParameter("WhoUpdate", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var whoDeleteParameter = whoDelete != null ?
                new ObjectParameter("WhoDelete", whoDelete) :
                new ObjectParameter("WhoDelete", typeof(string));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var team_IDParameter = team_ID != null ?
                new ObjectParameter("Team_ID", team_ID) :
                new ObjectParameter("Team_ID", typeof(string));
    
            var team_NAMEParameter = team_NAME != null ?
                new ObjectParameter("Team_NAME", team_NAME) :
                new ObjectParameter("Team_NAME", typeof(string));
    
            var joining_DateParameter = joining_Date.HasValue ?
                new ObjectParameter("Joining_Date", joining_Date) :
                new ObjectParameter("Joining_Date", typeof(System.DateTime));
    
            var paymentReceiptPathParameter = paymentReceiptPath != null ?
                new ObjectParameter("PaymentReceiptPath", paymentReceiptPath) :
                new ObjectParameter("PaymentReceiptPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Subscriptions_Result>("SP_Subscriptions", actionParameter, subscriptions_IDParameter, member_IDParameter, memberIdOrTeamIdParameter, payment_DateParameter, subscriptions_EyareParameter, iD_subscriptionParameter, subscriptionParameter, paymentY_NParameter, noteParameter, whoInsertParameter, insertDateParameter, approveByParameter, approveDateParameter, whoUpdateParameter, updateDateParameter, whoDeleteParameter, deleteDateParameter, iDParameter, team_IDParameter, team_NAMEParameter, joining_DateParameter, paymentReceiptPathParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_User_Profile_Result> sp_User_Profile(string action, Nullable<decimal> iD, string member_ID, string user_Name, string user_Pass, Nullable<bool> lock_Account, Nullable<bool> inActive)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var member_IDParameter = member_ID != null ?
                new ObjectParameter("Member_ID", member_ID) :
                new ObjectParameter("Member_ID", typeof(string));
    
            var user_NameParameter = user_Name != null ?
                new ObjectParameter("User_Name", user_Name) :
                new ObjectParameter("User_Name", typeof(string));
    
            var user_PassParameter = user_Pass != null ?
                new ObjectParameter("User_Pass", user_Pass) :
                new ObjectParameter("User_Pass", typeof(string));
    
            var lock_AccountParameter = lock_Account.HasValue ?
                new ObjectParameter("Lock_Account", lock_Account) :
                new ObjectParameter("Lock_Account", typeof(bool));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_User_Profile_Result>("sp_User_Profile", actionParameter, iDParameter, member_IDParameter, user_NameParameter, user_PassParameter, lock_AccountParameter, inActiveParameter);
        }
    }
}
